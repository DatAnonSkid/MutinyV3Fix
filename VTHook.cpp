#include "VTHook.h"
//#include "cx_strenc.h"
#include "IClientModeShared.h"
#include "IBaseClientDLL.h"
#include "Interfaces.h"
#include "AutoWall.h"
#include "Reporting.h"
#include "SetClanTag.h"
#include "ICvar.h"
#include "Events.h"
#include "EncryptString.h"
#include "GetViewModelFOV.h"
#include "DirectX.h"
#include "LocalPlayer.h"
#include <intrin.h> //VS2017 requires this for _ReturnAddress
#include "ClientSideAnimationList.h"
#include "VMProtectDefs.h"
#include "IVPanel.h"

DWORD AdrOfSetLastTimeStampInterpolate = NULL;
DWORD AdrOfIsPausedExtrapolate = NULL;
DWORD AdrOfSetLastTimeStampFSN = NULL;
DWORD AdrOfs_bInterpolate = NULL;
DWORD AdrOfInvalidateBoneCache = NULL;
DWORD AdrOf_m_iDidCheckForOcclusion = NULL;
DWORD AdrOf_m_nWritableBones = NULL;
DWORD AdrOf_m_dwOcclusionArray = NULL;
DWORD AdrOf_StandardFilterRulesCallOne = NULL;
DWORD AdrOf_StandardFilterRulesMemoryOne = NULL;
DWORD AdrOf_StandardFilterRulesMemoryTwo = NULL;
DWORD AdrOf_SetAbsOrigin = NULL;
DWORD AdrOf_SetAbsAngles = NULL;
DWORD AdrOf_SetAbsVelocity = NULL;
DWORD AdrOf_DataCacheSetPoseParmaeter = NULL;
bool *s_bOverridePostProcessingDisable = NULL;
DWORD OffsetOf_UpdateClientSideAnimation = NULL;
DWORD AdrOf_InvalidatePhysicsRecursive = NULL;
DWORD AdrOf_Frametime1 = NULL;
DWORD AdrOf_Frametime2 = NULL;
DWORD AdrOf_Frametime3 = NULL;
DWORD IsEntityBreakable_FirstCall_Arg1 = NULL;
DWORD IsEntityBreakable_FirstCall_Arg2 = NULL;
DWORD IsEntityBreakable_SecondCall_Arg1 = NULL;
DWORD IsEntityBreakable_SecondCall_Arg2 = NULL;
DWORD AdrOf_IsEntityBreakableCall = NULL;
unsigned long GlowObjectManagerAdr = NULL;
unsigned long RadarBaseAdr = NULL;
DWORD DemoPlayerVTable = NULL;
DWORD DemoPlayerCreateMoveReturnAdr = NULL;
DWORD SendDatagramCL_MoveReturnAdr = NULL;

GetLastTimeStampFn oGetLastTimeStamp;
LookupPoseParameterFn LookupPoseParameterGame;
GetPoseParameterRangeFn GetPoseParameterRangeGame;
SetPoseParameterFn SetPoseParameterGame;
SetupBonesFn oSetupBones;

DWORD* ClientCount = nullptr;
DWORD ClientList = NULL;

//FIXME: MOVE ME
float __stdcall Hooks::GetLastTimeStamp(void)
{
	//We are now using Entity->DisableInterpolation() instead
	//But, it seems that this still improves shot registration, TODO: TEST THIS THOROUGHLY
#if 0
	if (!DisableAllChk.Checked && RemoveInterpChk.Checked)
	{
		void* retadr = _ReturnAddress(); //_AddressOfReturnAddress
		if ((DWORD)retadr == AdrOfSetLastTimeStampInterpolate || (DWORD)retadr == AdrOfSetLastTimeStampFSN)
		{
			if (LocalPlayer.Entity && LocalPlayer.Entity->GetAlive())
				WriteByte(AdrOfs_bInterpolate, 0);
		}
	}
#else
	if (!DisableAllChk.Checked)
	{
		//Must iterate the entire entity list because rendering is on its own thread
		int MaxEntities = 64;// Interfaces::ClientEntList->GetHighestEntityIndex();
		int NumPlayers = GetClientCount();
		int CountedPlayers = 0;

		if (NumPlayers)
		{
			for (int i = 0; i <= MaxEntities; i++)
			{
				CBaseEntity* Entity = Interfaces::ClientEntList->GetClientEntity(i);
				CustomPlayer* pCPlayer = &AllPlayers[i];

				if (Entity && Entity->IsPlayer())
				{
					if (!Entity->GetDormant() && Entity != LocalPlayer.Entity)
					{
						if (DisableAllChk.Checked || !RemoveInterpChk.Checked)
							Entity->EnableInterpolation();
						else
							Entity->DisableInterpolation();
					}

					if (++CountedPlayers == NumPlayers)
						break;
				}
			}
		}
	}
#endif
	return oGetLastTimeStamp();
}

uintptr_t pMoveHelperServerPP;
DWORD g_pGameRules;
char GameRulesShouldCollideOffset;
VTHook*			VPanel;
VTHook*				ClientMode;
VTHook*				Client;
VTHook*             Trace;
VTHook*			Prediction;
VTHook*         Engine;
VTHook* EngineClientSound;
VTHook* TE_FireBullets;
VTHook* TE_EffectDispatch;
VTHook* DemoPlayer;
VTHook* HNetchan = nullptr;
VTHook* HSurface;
VTHook* GameRules = nullptr;

VTHook* HRenderView;
VTHook* DirectX;
//VTHook*			ModelRender;
//VTHook*			Surface;
//VTHook*			D3D9;

//Dylan's hook function won't work because you don't have write permissions to executable code, so we have to replace the whole table...
//OR, use VirtualProtect, and fuck that.
/*
DWORD HookGameFunc(DWORD** ppClassBase, int IndexToHook, DWORD ReplacementFunction)
{
	DWORD near OldVirtualTable = ReadInt((DWORD)ppClassBase);

	DWORD OriginalFunction = ReadInt(OldVirtualTable + (sizeof(DWORD*) * IndexToHook));
	WriteInt(OldVirtualTable + (sizeof(DWORD*) * IndexToHook), ReplacementFunction);
	return OriginalFunction;
}
*/

float(*RandomFloat) (float from, float to);
void (*RandomSeed) (unsigned int seed);
bool(*ThreadInMainThread) (void);
UINT(__cdecl* MD5_PseudoRandom)(UINT);

char *vclientstr = new char[11] {44, 57, 22, 19, 31, 20, 14, 74, 75, 66, 0}; /*VClient018*/
char *enginetracestr = new char[21]{ 63, 20, 29, 19, 20, 31, 46, 8, 27, 25, 31, 57, 22, 19, 31, 20, 14, 74, 74, 78, 0 }; /*EngineTraceClient004*/
char *vengineclientstr = new char[17]{ 44, 63, 20, 29, 19, 20, 31, 57, 22, 19, 31, 20, 14, 74, 75, 78, 0 }; /*VEngineClient014*/
char *vclientliststr = new char[21]{ 44, 57, 22, 19, 31, 20, 14, 63, 20, 14, 19, 14, 3, 54, 19, 9, 14, 74, 74, 73, 0 }; /*VClientEntityList003*/
char *vsurfpropsstr = new char[24]{ 44, 42, 18, 3, 9, 19, 25, 9, 41, 15, 8, 28, 27, 25, 31, 42, 8, 21, 10, 9, 74, 74, 75, 0 }; /*VPhysicsSurfaceProps001*/
char *vclientpredstr = new char[21]{ 44, 57, 22, 19, 31, 20, 14, 42, 8, 31, 30, 19, 25, 14, 19, 21, 20, 74, 74, 75, 0 }; /*VClientPrediction001*/
char *gamemovementstr = new char[16]{ 61, 27, 23, 31, 55, 21, 12, 31, 23, 31, 20, 14, 74, 74, 75, 0 }; /*GameMovement001*/
char *vmodelinfoclientstr = new char[20]{ 44, 55, 21, 30, 31, 22, 51, 20, 28, 21, 57, 22, 19, 31, 20, 14, 74, 74, 78, 0 }; /*VModelInfoClient004*/
char *venginecvarstr = new char[15]{ 44, 63, 20, 29, 19, 20, 31, 57, 12, 27, 8, 74, 74, 77, 0 }; /*VEngineCvar007*/
char *gameeventsmgrstr = new char[21]{ 61, 59, 55, 63, 63, 44, 63, 52, 46, 41, 55, 59, 52, 59, 61, 63, 40, 74, 74, 72, 0 }; /*GAMEEVENTSMANAGER002*/
char *vstdlibstr2 = new char[12]{ 12, 9, 14, 30, 22, 19, 24, 84, 30, 22, 22, 0 }; /*vstdlib.dll*/
char *randomfloatstr = new char[12]{ 40, 27, 20, 30, 21, 23, 60, 22, 21, 27, 14, 0 }; /*RandomFloat*/
char *randomseedstr = new char[11]{ 40, 27, 20, 30, 21, 23, 41, 31, 31, 30, 0 }; /*RandomSeed*/

char *pmovehelperstr = new char[39]{ 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 78, 76, 90, 90, 74, 66, 90, 90, 76, 66, 0 }; /*8B  0D  ??  ??  ??  ??  8B  46  08  68*/
//char *pmovehelperstr = new char[99]{ 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 78, 76, 90, 90, 74, 66, 90, 90, 76, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 79, 90, 90, 59, 57, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 66, 56, 90, 90, 75, 75, 90, 90, 79, 74, 90, 90, 60, 60, 90, 90, 79, 72, 90, 90, 75, 66, 0 }; /*8B  0D  ??  ??  ??  ??  8B  46  08  68  ??  ??  ??  ??  05  AC  00  00  00  8B  11  50  FF  52  18*/
//char *tracetoexitstr = new char[51]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 72, 57, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 77, 79, 90, 90, 69, 69, 90, 90, 73, 73, 90, 90, 57, 74, 0 }; /*55  8B  EC  83  EC  2C  F3  0F  10  75  ??  33  C0*/
//char *cliptracetoplayersstr = new char[123]{ 79, 73, 90, 90, 66, 56, 90, 90, 62, 57, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 74, 66, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 74, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 74, 78, 90, 90, 79, 79, 90, 90, 66, 56, 90, 90, 76, 56, 90, 90, 74, 78, 90, 90, 66, 67, 90, 90, 76, 57, 90, 90, 72, 78, 90, 90, 74, 78, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 75, 90, 90, 63, 57, 90, 90, 62, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 78, 73, 90, 90, 75, 74, 0 }; /*53  8B  DC  83  EC  08  83  E4  F0  83  C4  04  55  8B  6B  04  89  6C  24  04  8B  EC  81  EC  D8  ??  ??  ??  8B  43  10*/
char *cliptracetoplayersstr = new char[123]{ 79, 73, 90, 90, 66, 56, 90, 90, 62, 57, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 74, 66, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 74, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 74, 78, 90, 90, 79, 79, 90, 90, 66, 56, 90, 90, 76, 56, 90, 90, 74, 78, 90, 90, 66, 67, 90, 90, 76, 57, 90, 90, 72, 78, 90, 90, 74, 78, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 75, 90, 90, 63, 57, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 78, 73, 90, 90, 75, 74, 0 }; /*53  8B  DC  83  EC  08  83  E4  F0  83  C4  04  55  8B  6B  04  89  6C  24  04  8B  EC  81  EC  ??  ??  ??  ??  8B  43  10*/
char *handlebulletpenstr = new char[111]{ 79, 73, 90, 90, 66, 56, 90, 90, 62, 57, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 74, 66, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 66, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 74, 78, 90, 90, 79, 79, 90, 90, 66, 56, 90, 90, 76, 56, 90, 90, 74, 78, 90, 90, 66, 67, 90, 90, 76, 57, 90, 90, 72, 78, 90, 90, 74, 78, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 77, 66, 90, 90, 66, 56, 90, 90, 79, 73, 90, 90, 75, 78, 0 }; /*53  8B  DC  83  EC  08  83  E4  F8  83  C4  04  55  8B  6B  04  89  6C  24  04  8B  EC  83  EC  78  8B  53  14*/
char *getlastcompmatchidstr = new char[199]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 74, 66, 90, 90, 62, 75, 90, 90, 63, 66, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 59, 66, 90, 90, 74, 75, 90, 90, 77, 78, 90, 90, 79, 67, 90, 90, 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 57, 75, 90, 90, 66, 56, 90, 90, 73, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 79, 90, 90, 57, 67, 90, 90, 77, 79, 90, 90, 74, 73, 90, 90, 66, 56, 90, 90, 78, 76, 90, 90, 74, 66, 90, 90, 66, 56, 90, 90, 78, 74, 90, 90, 73, 74, 90, 90, 57, 75, 90, 90, 63, 66, 90, 90, 74, 78, 90, 90, 59, 66, 90, 90, 74, 75, 90, 90, 77, 78, 90, 90, 73, 59, 0 }; /*55  8B  EC  A1  ??  ??  ??  ??  83  EC  08  D1  E8  56  57  A8  01  74  59  8B  0D  ??  ??  ??  ??  8B  C1  8B  35  ??  ??  ??  ??  85  C9  75  03  8B  46  08  8B  40  30  C1  E8  04  A8  01  74  3A*/
char *setclantagsigstr = new char[35]{ 79, 73, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 62, 59, 90, 90, 66, 56, 90, 90, 60, 67, 90, 90, 60, 60, 90, 90, 75, 79, 0 }; /*53  56  57  8B  DA  8B  F9  FF  15*/
char *clientstatestr = new char[51]{ 66, 56, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 59, 90, 90, 60, 67, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 75, 90, 90, 78, 79, 90, 90, 60, 57, 0 }; /*8B  3D  ??  ??  ??  ??  8A  F9  F3  0F  11  45  FC*/
char *ispausedstr = new char[155]{ 66, 74, 90, 90, 56, 67, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 77, 79, 90, 90, 76, 72, 90, 90, 66, 74, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 77, 78, 90, 90, 72, 66, 90, 90, 66, 73, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 72, 90, 90, 77, 57, 90, 90, 74, 57, 90, 90, 66, 73, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 75, 90, 90, 74, 60, 90, 90, 67, 63, 90, 90, 57, 74, 90, 90, 63, 56, 90, 90, 74, 60, 0 }; /*80  B9  ??  ??  00  00  00  75  62  80  3D  ??  ??  ??  ??  00  74  28  83  3D  ??  ??  ??  ??  02  7C  0C  83  3D  ??  ??  ??  ??  01  0F  9E  C0  EB  0F*/
char *tickcountstr = new char[119]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 73, 73, 90, 90, 60, 76, 90, 90, 66, 56, 90, 90, 75, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 60, 66, 90, 90, 72, 56, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 59, 73, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 79, 90, 90, 62, 72, 90, 90, 77, 63, 90, 90, 75, 66, 0 }; /*A1  ??  ??  ??  ??  33  F6  8B  15  ??  ??  ??  ??  8B  F8  2B  3D  ??  ??  ??  ??  A3  ??  ??  ??  ??  85  D2  7E  18*/
char *predrandomseedstr = new char[75]{ 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 56, 59, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 74, 78, 0 }; /*8B  0D  ??  ??  ??  ??  BA  ??  ??  ??  ??  E8  ??  ??  ??  ??  83  C4  04*/
char *m_pPredictionPlayerCSGO_Sig = new char[47]{ 66, 73, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 77, 78, 90, 90, 69, 69, 90, 90, 79, 75, 90, 90, 66, 56, 90, 90, 74, 62, 0 }; /*83  3D  ??  ??  ??  ??  00  74  ??  51  8B  0D*/
char *gamerulesstr = new char[175]{ 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 60, 90, 90, 56, 73, 90, 90, 77, 74, 90, 90, 74, 78, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 60, 60, 90, 90, 77, 77, 90, 90, 74, 66, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 66, 56, 90, 90, 78, 74, 90, 90, 77, 74, 90, 90, 60, 60, 90, 90, 62, 74, 90, 90, 66, 78, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 75, 78, 90, 90, 66, 56, 90, 90, 78, 77, 90, 90, 74, 57, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 75, 76, 90, 90, 60, 60, 90, 90, 77, 79, 90, 90, 74, 57, 90, 90, 79, 76, 90, 90, 60, 60, 90, 90, 62, 74, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 74, 66, 90, 90, 66, 78, 90, 90, 57, 74, 0 }; /*8B  0D  ??  ??  ??  ??  FF  B3  70  04  00  00  FF  77  08  8B  01  8B  40  70  FF  D0  84  C0  74  14  8B  47  0C  85  C0  74  16  FF  75  0C  56  FF  D0  83  C4  08  84  C0*/
char *pseudorandomstr = new char[43]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 66, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 77, 74, 90, 90, 76, 59, 90, 90, 79, 66, 0 }; /*55  8B  EC  83  E4  F8  83  EC  70  6A  58*/
char *setlasttimestampinterpolatesig = new char[123]{ 60, 60, 90, 90, 62, 74, 90, 90, 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 56, 67, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 62, 67, 90, 90, 75, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 60, 90, 90, 79, 74, 90, 90, 73, 78, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 72, 72, 90, 90, 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 0 }; /*FF  D0  A1  ??  ??  ??  ??  B9  ??  ??  ??  ??  D9  1D  ??  ??  ??  ??  FF  50  34  85  C0  74  22  8B  0D  ??  ??  ??  ??*/
char *setlasttimestampfsnsig = new char[103]{ 60, 60, 90, 90, 62, 74, 90, 90, 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 76, 59, 90, 90, 74, 75, 90, 90, 76, 66, 90, 90, 59, 57, 90, 90, 74, 75, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 62, 67, 90, 90, 75, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 60, 60, 90, 90, 79, 74, 90, 90, 78, 74, 0 }; /*FF  D0  8B  0D  ??  ??  ??  ??  6A  01  68  AC  01  00  00  D9  1D  ??  ??  ??  ??  8B  01  FF  50  40*/
char *s_binterpolatesig = new char[119]{ 59, 74, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 56, 67, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 66, 90, 90, 78, 79, 90, 90, 60, 62, 90, 90, 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 60, 90, 90, 79, 74, 90, 90, 73, 78, 90, 90, 74, 60, 90, 90, 56, 76, 90, 90, 75, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 79, 90, 90, 57, 74, 0 }; /*A0  ??  ??  ??  ??  B9  ??  ??  ??  ??  88  45  FD  A1  ??  ??  ??  ??  FF  50  34  0F  B6  15  ??  ??  ??  ??  85  C0*/
char *invalidatebonecachestr = new char[127]{ 66, 74, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 77, 78, 90, 90, 75, 76, 90, 90, 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 78, 66, 90, 90, 57, 77, 90, 90, 66, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 60, 60, 90, 90, 60, 60, 90, 90, 77, 60, 90, 90, 60, 60, 90, 90, 66, 67, 90, 90, 66, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 57, 73, 0 }; /*80  3D  ??  ??  ??  ??  00  74  16  A1  ??  ??  ??  ??  48  C7  81  ??  ??  00  00  FF  FF  7F  FF  89  81  ??  ??  00  00  C3*/
//char *didcheckforocclusionsig = new char[47]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 73, 74, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 60, 67, 0 }; /*A1  ??  ??  ??  ??  83  EC  30  56  57  8B  F9*/
char *didcheckforocclusionsig = new char[67]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 56, 77, 90, 90, 73, 74, 90, 90, 74, 59, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 66, 67, 90, 90, 77, 79, 90, 90, 60, 66, 90, 90, 73, 67, 90, 90, 77, 74, 90, 90, 74, 78, 0 }; /*A1  ??  ??  ??  ??  8B  B7  30  0A  00  00  89  75  F8  39  70  04*/
//char *standardfilterrulessig = new char[83]{ 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 74, 56, 90, 90, 66, 62, 90, 90, 78, 66, 90, 90, 74, 78, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 60, 60, 90, 90, 79, 74, 90, 90, 75, 57, 90, 90, 74, 60, 90, 90, 56, 77, 90, 90, 73, 66, 90, 90, 59, 75, 0 }; /*E8  ??  ??  ??  ??  85  C0  74  0B  8D  48  04  8B  01  FF  50  1C  0F  B7  38  A1*/
char *standardfilterrulessig = new char[67]{ 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 74, 56, 90, 90, 66, 62, 90, 90, 78, 66, 90, 90, 74, 78, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 60, 60, 90, 90, 79, 74, 90, 90, 75, 57, 0 }; /*E8  ??  ??  ??  ??  85  C0  74  0B  8D  48  04  8B  01  FF  50  1C*/
char *standardfilterrulescallsig = new char[143]{ 66, 56, 90, 90, 66, 67, 90, 90, 78, 66, 90, 90, 74, 75, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 66, 73, 90, 90, 60, 67, 90, 90, 60, 60, 90, 90, 77, 78, 90, 90, 75, 76, 90, 90, 74, 60, 90, 90, 56, 77, 90, 90, 57, 75, 90, 90, 57, 75, 90, 90, 63, 74, 90, 90, 74, 78, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 57, 75, 90, 90, 63, 67, 90, 90, 75, 74, 90, 90, 73, 67, 90, 90, 78, 66, 90, 90, 74, 78, 90, 90, 77, 79, 90, 90, 74, 73, 90, 90, 66, 56, 90, 90, 74, 74, 90, 90, 57, 73, 90, 90, 73, 73, 90, 90, 57, 74, 90, 90, 57, 73, 0 }; /*8B  89  48  01  00  00  83  F9  FF  74  16  0F  B7  C1  C1  E0  04  05  ??  ??  ??  ??  C1  E9  10  39  48  04  75  03  8B  00  C3  33  C0  C3*/
char *getcompranksig = new char[55]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 76, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 0 }; /*55  8B  EC  8B  0D  ??  ??  ??  ??  68  ??  ??  ??  ??*/
char *setabsoriginstr = new char[315]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 66, 90, 90, 79, 75, 90, 90, 79, 73, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 66, 56, 90, 90, 77, 62, 90, 90, 74, 66, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 74, 77, 90, 90, 74, 60, 90, 90, 72, 63, 90, 90, 66, 76, 90, 90, 59, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 67, 60, 90, 90, 60, 76, 90, 90, 57, 78, 90, 90, 78, 78, 90, 90, 77, 59, 90, 90, 72, 66, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 78, 77, 90, 90, 74, 78, 90, 90, 74, 60, 90, 90, 72, 63, 90, 90, 66, 76, 90, 90, 59, 78, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 67, 60, 90, 90, 60, 76, 90, 90, 57, 78, 90, 90, 78, 78, 90, 90, 77, 59, 90, 90, 75, 76, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 78, 77, 90, 90, 74, 66, 90, 90, 74, 60, 90, 90, 72, 63, 90, 90, 66, 76, 90, 90, 59, 66, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 67, 60, 90, 90, 60, 76, 90, 90, 57, 78, 90, 90, 78, 78, 90, 90, 74, 60, 90, 90, 66, 56, 90, 90, 76, 73, 90, 90, 74, 75, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 76, 59, 90, 90, 74, 75, 0 }; /*55  8B  EC  83  E4  F8  51  53  56  57  8B  F1  ??  ??  ??  ??  00  8B  7D  08  F3  0F  10  07  0F  2E  86  A0  00  00  00  9F  F6  C4  44  7A  28  F3  0F  10  47  04  0F  2E  86  A4  00  00  00  9F  F6  C4  44  7A  16  F3  0F  10  47  08  0F  2E  86  A8  00  00  00  9F  F6  C4  44  0F  8B  63  01  00  00  6A  01*/
char *setabsanglesstr = new char[55]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 66, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 76, 78, 90, 90, 79, 73, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 60, 75, 0 }; /*55  8B  EC  83  E4  F8  83  EC  64  53  56  57  8B  F1*/
char *setabsvelocitystr = new char[303]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 66, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 74, 57, 90, 90, 79, 73, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 77, 62, 90, 90, 74, 66, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 74, 77, 90, 90, 74, 60, 90, 90, 72, 63, 90, 90, 66, 76, 90, 90, 67, 78, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 67, 60, 90, 90, 60, 76, 90, 90, 57, 78, 90, 90, 78, 78, 90, 90, 77, 59, 90, 90, 72, 66, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 78, 77, 90, 90, 74, 78, 90, 90, 74, 60, 90, 90, 72, 63, 90, 90, 66, 76, 90, 90, 67, 66, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 67, 60, 90, 90, 60, 76, 90, 90, 57, 78, 90, 90, 78, 78, 90, 90, 77, 59, 90, 90, 75, 76, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 78, 77, 90, 90, 74, 66, 90, 90, 74, 60, 90, 90, 72, 63, 90, 90, 66, 76, 90, 90, 67, 57, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 67, 60, 90, 90, 60, 76, 90, 90, 57, 78, 90, 90, 78, 78, 90, 90, 74, 60, 90, 90, 66, 56, 90, 90, 77, 72, 90, 90, 74, 75, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 76, 59, 90, 90, 74, 78, 0 }; /*55  8B  EC  83  E4  F8  83  EC  0C  53  56  57  8B  7D  08  8B  F1  F3  0F  10  07  0F  2E  86  94  00  00  00  9F  F6  C4  44  7A  28  F3  0F  10  47  04  0F  2E  86  98  00  00  00  9F  F6  C4  44  7A  16  F3  0F  10  47  08  0F  2E  86  9C  00  00  00  9F  F6  C4  44  0F  8B  72  01  00  00  6A  04*/
char *setposeparameterstr = new char[123]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 75, 90, 90, 79, 76, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 74, 60, 90, 90, 72, 66, 90, 90, 57, 72, 90, 90, 79, 77, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 75, 90, 90, 78, 79, 90, 90, 60, 57, 90, 90, 66, 73, 90, 90, 56, 63, 90, 90, 73, 57, 90, 90, 72, 67, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 77, 79, 90, 90, 75, 67, 90, 90, 66, 56, 90, 90, 78, 76, 90, 90, 74, 78, 90, 90, 66, 62, 90, 90, 78, 63, 90, 90, 74, 78, 0 }; /*55  8B  EC  51  56  8B  F1  0F  28  C2  57  F3  0F  11  45  FC  83  BE  3C  29  00  00  00  75  19  8B  46  04  8D  4E  04*/
char *datacachesetposeparametersig = new char[103]{ 66, 56, 90, 90, 73, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 57, 63, 90, 90, 66, 56, 90, 90, 74, 76, 90, 90, 60, 60, 90, 90, 67, 74, 90, 90, 66, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 60, 60, 90, 90, 77, 73, 90, 90, 74, 78, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 79, 79, 90, 90, 60, 57, 90, 90, 66, 56, 90, 90, 57, 60, 0 }; /*8B  35  ??  ??  ??  ??  8B  CE  8B  06  FF  90  80  00  00  00  FF  73  04  F3  0F  10  55  FC  8B  CF*/
//char *lookupposeparameterstr = new char[251]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 73, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 60, 67, 90, 90, 66, 73, 90, 90, 56, 60, 90, 90, 73, 57, 90, 90, 72, 67, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 77, 79, 90, 90, 75, 78, 90, 90, 66, 56, 90, 90, 78, 77, 90, 90, 74, 78, 90, 90, 66, 62, 90, 90, 78, 60, 90, 90, 74, 78, 90, 90, 60, 60, 90, 90, 79, 74, 90, 90, 72, 74, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 74, 77, 90, 90, 66, 56, 90, 90, 57, 60, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 56, 60, 90, 90, 73, 57, 90, 90, 72, 67, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 66, 79, 90, 90, 60, 60, 90, 90, 77, 78, 90, 90, 73, 66, 90, 90, 66, 73, 90, 90, 73, 60, 90, 90, 74, 74, 90, 90, 77, 78, 90, 90, 73, 73, 90, 90, 66, 56, 90, 90, 57, 60, 90, 90, 73, 73, 90, 90, 60, 76, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 79, 90, 90, 57, 74, 0 }; /*55  8B  EC  53  56  57  8B  F9  83  BF  3C  29  00  00  00  75  14  8B  47  04  8D  4F  04  FF  50  20  85  C0  74  07  8B  CF  E8  ??  ??  ??  ??  8B  BF  3C  29  00  00  85  FF  74  38  83  3F  00  74  33  8B  CF  33  F6  E8  ??  ??  ??  ??  85  C0*/
char *lookupposeparameterstr = new char[75]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 77, 62, 90, 90, 74, 66, 90, 90, 66, 79, 90, 90, 60, 60, 90, 90, 77, 79, 90, 90, 74, 66, 90, 90, 66, 73, 90, 90, 57, 66, 90, 90, 60, 60, 90, 90, 79, 60, 90, 90, 79, 62, 90, 90, 57, 72, 90, 90, 74, 66, 90, 90, 74, 74, 0 }; /*55  8B  EC  57  8B  7D  08  85  FF  75  08  83  C8  FF  5F  5D  C2  08  00*/
//char *getposeparameterrangestr = new char[283]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 76, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 66, 73, 90, 90, 56, 63, 90, 90, 73, 57, 90, 90, 72, 67, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 77, 79, 90, 90, 75, 78, 90, 90, 66, 56, 90, 90, 78, 76, 90, 90, 74, 78, 90, 90, 66, 62, 90, 90, 78, 63, 90, 90, 74, 78, 90, 90, 60, 60, 90, 90, 79, 74, 90, 90, 72, 74, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 74, 77, 90, 90, 66, 56, 90, 90, 57, 63, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 66, 63, 90, 90, 73, 57, 90, 90, 72, 67, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 79, 63, 90, 90, 66, 79, 90, 90, 57, 67, 90, 90, 77, 78, 90, 90, 78, 66, 90, 90, 66, 73, 90, 90, 73, 67, 90, 90, 74, 74, 90, 90, 77, 78, 90, 90, 78, 73, 90, 90, 66, 56, 90, 90, 79, 79, 90, 90, 74, 66, 90, 90, 66, 79, 90, 90, 62, 72, 90, 90, 77, 66, 90, 90, 73, 57, 90, 90, 66, 56, 90, 90, 78, 75, 90, 90, 74, 78, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 79, 90, 90, 75, 72, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 74, 66, 0 }; /*55  8B  EC  56  8B  F1  83  BE  3C  29  00  00  00  75  14  8B  46  04  8D  4E  04  FF  50  20  85  C0  74  07  8B  CE  E8  ??  ??  ??  ??  8B  8E  3C  29  00  00  5E  85  C9  74  48  83  39  00  74  43  8B  55  08  85  D2  78  3C  8B  41  04  85  C0  75  12  8B  01  85  C0  74  08*/
char *getposeparameterrangestr = new char[311]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 76, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 66, 73, 90, 90, 56, 63, 90, 90, 73, 57, 90, 90, 72, 67, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 77, 79, 90, 90, 75, 78, 90, 90, 66, 56, 90, 90, 78, 76, 90, 90, 74, 78, 90, 90, 66, 62, 90, 90, 78, 63, 90, 90, 74, 78, 90, 90, 60, 60, 90, 90, 79, 74, 90, 90, 72, 74, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 74, 77, 90, 90, 66, 56, 90, 90, 57, 63, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 66, 63, 90, 90, 73, 57, 90, 90, 72, 67, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 66, 79, 90, 90, 57, 67, 90, 90, 77, 78, 90, 90, 78, 67, 90, 90, 66, 73, 90, 90, 73, 67, 90, 90, 74, 74, 90, 90, 77, 78, 90, 90, 78, 78, 90, 90, 66, 56, 90, 90, 79, 79, 90, 90, 74, 66, 90, 90, 66, 79, 90, 90, 62, 72, 90, 90, 77, 66, 90, 90, 73, 62, 90, 90, 66, 56, 90, 90, 78, 75, 90, 90, 74, 78, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 79, 90, 90, 75, 72, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 74, 66, 90, 90, 66, 56, 90, 90, 66, 74, 90, 90, 72, 57, 90, 90, 74, 75, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 63, 56, 90, 90, 74, 77, 0 }; /*55  8B  EC  56  8B  F1  83  BE  3C  29  00  00  00  75  14  8B  46  04  8D  4E  04  FF  50  20  85  C0  74  07  8B  CE  E8  ??  ??  ??  ??  8B  8E  3C  29  00  00  85  C9  74  49  83  39  00  74  44  8B  55  08  85  D2  78  3D  8B  41  04  85  C0  75  12  8B  01  85  C0  74  08  8B  80  2C  01  00  00  EB  07*/
char *getposeparametersstr = new char[167]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 76, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 66, 56, 90, 90, 78, 62, 90, 90, 74, 66, 90, 90, 66, 79, 90, 90, 57, 67, 90, 90, 77, 78, 90, 90, 72, 66, 90, 90, 73, 73, 90, 90, 62, 72, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 63, 90, 90, 75, 62, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 77, 62, 90, 90, 74, 57, 90, 90, 66, 75, 90, 90, 57, 76, 90, 90, 76, 78, 90, 90, 72, 77, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 66, 56, 90, 90, 74, 76, 90, 90, 66, 62, 90, 90, 77, 76, 90, 90, 74, 78, 90, 90, 66, 67, 90, 90, 74, 78, 90, 90, 67, 77, 0 }; /*55  8B  EC  56  8B  F1  8B  4D  08  85  C9  74  28  33  D2  E8  ??  ??  ??  ??  85  C0  7E  1D  57  8B  7D  0C  81  C6  64  27  00  00  8B  06  8D  76  04  89  04  97*/
char *s_bOverridePostProcessingDisable_sig = new char[47]{ 66, 74, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 79, 73, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 74, 60, 90, 90, 66, 79, 0 }; /*80  3D  ??  ??  ??  ??  ??  53  56  57  0F  85*/
char *vdebugstr = new char[17]{ 44, 62, 31, 24, 15, 29, 53, 12, 31, 8, 22, 27, 3, 74, 74, 78, 0 }; /*VDebugOverlay004*/
//char *renderviewsignaturestr = new char[35]{ 60, 60, 90, 90, 79, 74, 90, 90, 75, 78, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 79, 62, 0 }; /*FF  50  14  E8  ??  ??  ??  ??  5D*/
char *dxptrstr = new char[43]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 79, 74, 90, 90, 66, 56, 90, 90, 74, 66, 90, 90, 60, 60, 90, 90, 79, 75, 90, 90, 74, 57, 0 }; /*A1  ??  ??  ??  ??  50  8B  08  FF  51  0C*/
char *updateclientsideanimsig = new char[35]{ 77, 78, 90, 90, 74, 56, 90, 90, 66, 56, 90, 90, 74, 57, 90, 90, 60, 74, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 60, 60, 90, 90, 67, 74, 0 }; /*74  0B  8B  0C  F0  8B  01  FF  90*/
char *updateclientsideanimfnsigstr = new char[95]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 75, 90, 90, 79, 76, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 66, 74, 90, 90, 56, 63, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 77, 78, 90, 90, 73, 76, 90, 90, 66, 56, 90, 90, 74, 76, 90, 90, 60, 60, 90, 90, 67, 74, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 0 }; /*55  8B  EC  51  56  8B  F1  80  BE  ??  ??  00  00  00  74  36  8B  06  FF  90  ??  ??  00  00*/
//char *invalidatephysicsrecursivestr = new char[95]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 66, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 74, 57, 90, 90, 79, 73, 90, 90, 66, 56, 90, 90, 79, 62, 90, 90, 74, 66, 90, 90, 73, 73, 90, 90, 57, 74, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 60, 67, 90, 90, 57, 76, 90, 90, 78, 78, 90, 90, 72, 78, 90, 90, 74, 60, 90, 90, 74, 74, 0 }; /*55  8B  EC  83  E4  F8  83  EC  0C  53  8B  5D  08  33  C0  56  57  8B  F9  C6  44  24  0F  00*/
char *invalidatephysicsrecursivestr = new char[75]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 66, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 74, 57, 90, 90, 79, 73, 90, 90, 66, 56, 90, 90, 79, 62, 90, 90, 74, 66, 90, 90, 66, 56, 90, 90, 57, 73, 90, 90, 79, 76, 90, 90, 66, 73, 90, 90, 63, 74, 90, 90, 74, 78, 0 }; /*55  8B  EC  83  E4  F8  83  EC  0C  53  8B  5D  08  8B  C3  56  83  E0  04*/
char *mdlcachestr = new char[12]{ 55, 62, 54, 57, 27, 25, 18, 31, 74, 74, 78, 0 }; /*MDLCache004*/
char *frametimesigstr = new char[131]{ 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 75, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 75, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 79, 75, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 75, 90, 90, 74, 78, 90, 90, 72, 78, 90, 90, 66, 62, 90, 90, 78, 62, 90, 90, 59, 66, 0 }; /*F3  0F  10  05  ??  ??  ??  ??  F3  0F  10  1D  ??  ??  ??  ??  F3  0F  10  15  ??  ??  ??  ??  51  F3  0F  11  04  24  8D  4D  A8*/
char *clientlistsigstr = new char[27]{ 73, 73, 90, 90, 60, 60, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 74, 78, 90, 90, 73, 67, 90, 90, 73, 62, 0 }; /*33  FF  83  C4  04  39  3D*/
char *clientsideanimationlistsig = new char[47]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 76, 90, 90, 78, 78, 90, 90, 60, 74, 90, 90, 74, 78, 90, 90, 74, 75, 90, 90, 77, 78, 90, 90, 74, 56, 0 }; /*A1  ??  ??  ??  ??  F6  44  F0  04  01  74  0B*/
#ifdef SERVER_CRASHER
//char *net_sendpacketsig = new char[67]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 56, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 79, 73, 90, 90, 66, 56, 90, 90, 79, 62, 90, 90, 75, 74, 0 }; /*55  8B  EC  B8  ??  ??  ??  ??  E8  ??  ??  ??  ??  53  8B  5D  10*/
//char *net_senddatasig = new char[99]{ 66, 62, 90, 90, 78, 75, 90, 90, 74, 78, 90, 90, 79, 74, 90, 90, 79, 75, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 74, 57, 90, 90, 60, 60, 90, 90, 78, 63, 90, 90, 74, 57, 90, 90, 56, 74, 90, 90, 74, 75, 90, 90, 79, 60, 90, 90, 79, 63, 90, 90, 79, 56, 90, 90, 79, 62, 90, 90, 57, 72, 90, 90, 74, 78, 90, 90, 74, 74, 0 }; /*8D  41  04  50  51  E8  ??  ??  ??  ??  83  C4  0C  FF  4E  0C  B0  01  5F  5E  5B  5D  C2  04  00*/
char *net_senddatagramsig = new char[103]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 74, 90, 90, 56, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 60, 67, 90, 90, 66, 67, 90, 90, 77, 57, 90, 90, 72, 78, 90, 90, 75, 78, 90, 90, 66, 73, 90, 90, 56, 60, 0 }; /*55  8B  EC  83  E4  F0  B8  ??  ??  ??  ??  E8  ??  ??  ??  ??  56  57  8B  F9  89  7C  24  14  83  BF*/
#endif
//char *s_bEnableInvalidateBoneCachesig = new char[91]{ 57, 76, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 62, 67, 90, 90, 79, 62, 90, 90, 60, 78, 0 }; /*C6  05  ??  ??  ??  ??  00  E8  ??  ??  ??  ??  F3  0F  10  0D  ??  ??  ??  ??  D9  5D  F4*/
char *s_bEnableInvalidateBoneCachesig = new char[43]{ 60, 73, 90, 90, 74, 60, 90, 90, 79, 57, 90, 90, 57, 75, 90, 90, 57, 76, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 0 }; /*F3  0F  5C  C1  C6  05  ??  ??  ??  ??  00*/
//char *glowobjectmanagersig = new char[51]{ 74, 60, 90, 90, 79, 77, 90, 90, 57, 74, 90, 90, 57, 77, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 0 }; /*0F  57  C0  C7  05  ??  ??  ??  ??  00  00  00  00*/
//char *glowobjectmanager2sig = new char[235]{ 74, 60, 90, 90, 79, 77, 90, 90, 57, 74, 90, 90, 57, 77, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 60, 90, 90, 75, 75, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 76, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 60, 90, 90, 72, 66, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 60, 90, 90, 75, 75, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 57, 77, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 57, 77, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 0 }; /*0F  57  C0  C7  05  ??  ??  ??  ??  00  00  00  00  0F  11  05  ??  ??  ??  ??  68  ??  ??  ??  ??  0F  28  05  ??  ??  ??  ??  0F  11  05  ??  ??  ??  ??  C7  05  ??  ??  ??  ??  00  00  00  00  C7  05  ??  ??  ??  ??  00  00  00  00*/
char *glowobjectmanager3str = new char[79]{ 74, 60, 90, 90, 75, 75, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 73, 90, 90, 57, 66, 90, 90, 74, 75, 90, 90, 57, 77, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 74, 0 }; /*0F  11  05  ??  ??  ??  ??  83  C8  01  C7  05  ??  ??  ??  ??  00  00  00  00*/
char *radarbasesig = new char[59]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 73, 57, 90, 90, 56, 74, 90, 90, 66, 79, 90, 90, 60, 60, 90, 90, 77, 78, 90, 90, 76, 72, 90, 90, 66, 74, 90, 90, 73, 56, 90, 90, 74, 74, 0 }; /*A1  ??  ??  ??  ??  ??  3C  B0  85  FF  74  62  80  3B  00*/
char *IsEntityBreakableSig1 = new char[131]{ 76, 59, 90, 90, 74, 74, 90, 90, 76, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 76, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 76, 59, 90, 90, 74, 74, 90, 90, 79, 76, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 75, 78, 90, 90, 66, 79, 90, 90, 57, 74, 90, 90, 77, 78, 90, 90, 75, 72, 90, 90, 66, 56, 90, 90, 75, 74, 90, 90, 66, 56, 90, 90, 57, 66, 90, 90, 60, 60, 90, 90, 75, 72, 0 }; /*6A  00  68  ??  ??  ??  ??  68  ??  ??  ??  ??  6A  00  56  E8  ??  ??  ??  ??  83  C4  14  85  C0  74  12  8B  10  8B  C8  FF  12*/
char *IsEntityBreakableSig2 = new char[143]{ 76, 59, 90, 90, 74, 74, 90, 90, 76, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 76, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 76, 59, 90, 90, 74, 74, 90, 90, 79, 76, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 57, 66, 90, 90, 66, 73, 90, 90, 57, 78, 90, 90, 75, 78, 90, 90, 66, 79, 90, 90, 57, 67, 90, 90, 77, 78, 90, 90, 75, 77, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 66, 56, 90, 90, 78, 74, 90, 90, 74, 57, 90, 90, 60, 60, 90, 90, 62, 74, 0 }; /*6A  00  68  ??  ??  ??  ??  68  ??  ??  ??  ??  6A  00  56  E8  ??  ??  ??  ??  8B  C8  83  C4  14  85  C9  74  17  8B  01  8B  40  0C  FF  D0*/
char *IsEntityBreakableActualCallSig = new char[59]{ 76, 59, 90, 90, 75, 66, 90, 90, 76, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 77, 62, 90, 90, 74, 66, 0 }; /*6A  18  68  ??  ??  ??  ??  E8  ??  ??  ??  ??  8B  7D  08*/
//char *demoplayersigstr = new char[135]{ 74, 60, 90, 90, 66, 78, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 74, 75, 90, 90, 66, 56, 90, 90, 78, 74, 90, 90, 75, 74, 90, 90, 60, 60, 90, 90, 62, 74, 90, 90, 66, 78, 90, 90, 57, 74, 90, 90, 74, 60, 90, 90, 66, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 73, 90, 90, 56, 60, 90, 90, 74, 74, 90, 90, 74, 75, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 76, 0 }; /*0F  84  ??  ??  ??  ??  8B  0D  ??  ??  ??  ??  8B  01  8B  40  10  FF  D0  84  C0  0F  85  ??  ??  ??  ??  83  BF  00  01  00  00  06*/
char *enginesoundclientstr = new char[22]{ 51, 63, 20, 29, 19, 20, 31, 41, 21, 15, 20, 30, 57, 22, 19, 31, 20, 14, 74, 74, 73, 0 }; /*IEngineSoundClient003*/
char *vguimatsurfacestr = new char[19]{ 12, 29, 15, 19, 23, 27, 14, 9, 15, 8, 28, 27, 25, 31, 84, 30, 22, 22, 0 }; /*vguimatsurface.dll*/
char *vguisurfacestr = new char[16]{ 44, 61, 47, 51, 37, 41, 15, 8, 28, 27, 25, 31, 74, 73, 75, 0 }; /*VGUI_Surface031*/
char *vgui2str = new char[10]{ 12, 29, 15, 19, 72, 84, 30, 22, 22, 0 }; /*vgui2.dll*/
char *vguipanelstr = new char[14]{ 44, 61, 47, 51, 37, 42, 27, 20, 31, 22, 74, 74, 67, 0 }; /*VGUI_Panel009*/
char *weaponscriptpointerstr = new char[51]{ 56, 67, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 79, 74, 90, 90, 60, 60, 90, 90, 79, 76, 90, 90, 74, 66, 90, 90, 66, 56, 90, 90, 60, 66, 90, 90, 66, 79, 90, 90, 60, 60, 0 }; /*B9  ??  ??  ??  ??  50  FF  56  08  8B  F8  85  FF*/
char *weaponscriptcallsigstr = new char[79]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 75, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 63, 66, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 60, 90, 90, 56, 77, 90, 90, 66, 63, 90, 90, 62, 66, 90, 90, 74, 75, 90, 90, 74, 74, 90, 90, 74, 74, 0 }; /*55  8B  EC  51  56  57  8B  F1  E8  ??  ??  ??  ??  0F  B7  8E  D8  01  00  00*/
char *getcswpndatasig = new char[87]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 75, 90, 90, 63, 57, 90, 90, 74, 57, 90, 90, 74, 75, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 79, 73, 90, 90, 66, 56, 90, 90, 62, 67, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 62, 90, 90, 66, 56, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 79, 90, 90, 57, 67, 0 }; /*55  8B  EC  81  EC  0C  01  00  00  53  8B  D9  56  57  8D  8B  ??  ??  ??  ??  85  C9*/
char *cam_tothirdperson_sig = new char[51]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 56, 67, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 60, 90, 90, 67, 74, 90, 90, 66, 57, 0 }; /*A1  ??  ??  ??  ??  B9  ??  ??  ??  ??  FF  90  8C*/
char *cam_tofirstperson_sig = new char[51]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 56, 67, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 60, 90, 90, 67, 74, 90, 90, 67, 74, 0 }; /*A1  ??  ??  ??  ??  B9  ??  ??  ??  ??  FF  90  90*/
char *setupbonessigstr = new char[39]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 76, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 79, 75, 90, 90, 66, 62, 90, 90, 78, 63, 90, 90, 60, 57, 0 }; /*55  8B  EC  56  8B  F1  51  8D  4E  FC*/
char *ikinitsig = new char[75]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 74, 66, 90, 90, 66, 56, 90, 90, 78, 79, 90, 90, 74, 66, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 56, 90, 90, 60, 67, 90, 90, 66, 62, 90, 90, 66, 60, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 0 }; /*55  8B  EC  83  EC  08  8B  45  08  56  57  8B  F9  8D  8F  ??  ??  ??  ??*/
char *updatetargetssig = new char[55]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 74, 90, 90, 66, 75, 90, 90, 63, 57, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 73, 73, 90, 90, 62, 72, 0 }; /*55  8B  EC  83  E4  F0  81  EC  ??  ??  ??  ??  33  D2*/
char *solvedependenciessig = new char[71]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 78, 90, 90, 60, 74, 90, 90, 66, 75, 90, 90, 63, 57, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 66, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 0 }; /*55  8B  EC  83  E4  F0  81  EC  ??  ??  ??  ??  8B  81  ??  ??  ??  ??*/
char *attachmenthelpersig = new char[51]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 66, 73, 90, 90, 63, 57, 90, 90, 78, 66, 90, 90, 79, 73, 90, 90, 66, 56, 90, 90, 79, 62, 90, 90, 74, 66, 90, 90, 66, 67, 90, 90, 78, 62, 90, 90, 60, 78, 0 }; /*55  8B  EC  83  EC  48  53  8B  5D  08  89  4D  F4*/
char *createiksig = new char[35]{ 79, 76, 90, 90, 66, 56, 90, 90, 60, 75, 90, 90, 76, 59, 90, 90, 74, 74, 90, 90, 76, 59, 90, 90, 74, 74, 90, 90, 57, 77, 90, 90, 66, 76, 0 }; /*56  8B  F1  6A  00  6A  00  C7  86*/
char *teleportedsig = new char[147]{ 66, 56, 90, 90, 67, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 73, 90, 90, 60, 59, 90, 90, 60, 60, 90, 90, 77, 78, 90, 90, 75, 77, 90, 90, 74, 60, 90, 90, 56, 77, 90, 90, 57, 72, 90, 90, 57, 75, 90, 90, 63, 74, 90, 90, 74, 78, 90, 90, 74, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 57, 75, 90, 90, 63, 59, 90, 90, 75, 74, 90, 90, 73, 67, 90, 90, 79, 74, 90, 90, 74, 78, 90, 90, 77, 79, 90, 90, 74, 78, 90, 90, 66, 56, 90, 90, 74, 74, 90, 90, 63, 56, 90, 90, 74, 72, 90, 90, 73, 73, 90, 90, 57, 74, 90, 90, 79, 76, 0 }; /*8B  91  ??  ??  ??  ??  83  FA  FF  74  17  0F  B7  C2  C1  E0  04  05  ??  ??  ??  ??  C1  EA  10  39  50  04  75  04  8B  00  EB  02  33  C0  56*/
char *threadinmainthreadstr = new char[19]{ 46, 18, 8, 31, 27, 30, 51, 20, 55, 27, 19, 20, 46, 18, 8, 31, 27, 30, 0 }; /*ThreadInMainThread*/
char *allowboneaccessfornormalmodelssig = new char[63]{ 74, 60, 90, 90, 56, 76, 90, 90, 75, 79, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 78, 90, 90, 57, 74, 90, 90, 74, 60, 90, 90, 56, 76, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 0 }; /*0F  B6  15  ??  ??  ??  ??  84  C0  0F  B6  0D  ??  ??  ??  ??*/
char *allowboneaccessforviewmodelssig = new char[47]{ 74, 60, 90, 90, 56, 76, 90, 90, 74, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 60, 90, 90, 78, 79, 90, 90, 62, 75, 90, 90, 66, 78, 90, 90, 62, 72, 0 }; /*0F  B6  0D  ??  ??  ??  ??  0F  45  D1  84  D2*/
char *modelbonecountersig = new char[79]{ 74, 60, 90, 90, 66, 78, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 56, 90, 90, 78, 77, 90, 90, 60, 57, 90, 90, 66, 62, 90, 90, 78, 60, 90, 90, 60, 57, 90, 90, 60, 73, 90, 90, 74, 60, 90, 90, 75, 74, 90, 90, 66, 77, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 0 }; /*0F  84  ??  ??  ??  ??  8B  47  FC  8D  4F  FC  F3  0F  10  87  ??  ??  ??  ??*/
char *unknownsetupbonessig = new char[43]{ 59, 75, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 66, 75, 90, 90, 57, 67, 90, 90, 74, 74, 90, 90, 74, 74, 90, 90, 74, 66, 90, 90, 74, 74, 0 }; /*A1  ??  ??  ??  ??  81  C9  00  00  08  00*/
char *shouldskipanimationframesig = new char[67]{ 79, 77, 90, 90, 66, 56, 90, 90, 60, 67, 90, 90, 66, 56, 90, 90, 74, 77, 90, 90, 66, 56, 90, 90, 66, 74, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 60, 60, 90, 90, 62, 74, 90, 90, 66, 78, 90, 90, 57, 74, 90, 90, 77, 79, 90, 90, 74, 72, 0 }; /*57  8B  F9  8B  07  8B  80  ??  ??  ??  ??  FF  D0  84  C0  75  02*/
char *inthreadedbonesetupsig = new char[35]{ 66, 74, 90, 90, 73, 62, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 69, 69, 90, 90, 74, 74, 90, 90, 66, 62, 90, 90, 66, 60, 0 }; /*80  3D  ??  ??  ??  ??  00  8D  8F*/
char *mdlcachecriticalsectioncallsig = new char[43]{ 79, 79, 90, 90, 66, 56, 90, 90, 63, 57, 90, 90, 79, 75, 90, 90, 79, 73, 90, 90, 66, 56, 90, 90, 62, 67, 90, 90, 79, 76, 90, 90, 79, 77, 90, 90, 66, 62, 90, 90, 56, 73, 0 }; /*55  8B  EC  51  53  8B  D9  56  57  8D  B3*/

void SetupVMTHooks()
{
	VMP_BEGINULTRA("VMTH")

#ifdef _DEBUG
	char tst[64];
	sprintf(tst, "AllPlayers + StreamedPlayers structs = %f MB", (float)((float)sizeof(AllPlayers) / (1024 * 1024)) + (float)((float)sizeof(StreamedPlayers) / (1024 * 1024)));
	MessageBoxA(NULL, tst, "", MB_OK);
#endif

	//Setup interfaces from gamedlls
	DecStr(vclientstr, 10);
	Interfaces::Client = CaptureInterface<IBaseClientDll>(ClientHandle, vclientstr);
	EncStr(vclientstr, 10);
	delete[] vclientstr;

	Interfaces::ClientMode = **(IClientModeShared***)((*(DWORD**)Interfaces::Client)[10] + 0x5);
	DecStr(enginetracestr, 20);
	Interfaces::Globals = **(IGlobalVarsBase***)((*(DWORD**)Interfaces::Client)[0] + 0x1B);
	Interfaces::EngineTrace = CaptureInterface<IEngineTrace>(EngineHandle, enginetracestr);
	EncStr(enginetracestr, 20);
	delete[]enginetracestr;

	DecStr(vengineclientstr, 16);
	Interfaces::Engine = CaptureInterface<IEngineClient>(EngineHandle, vengineclientstr);
	EncStr(vengineclientstr, 16);
	delete[] vengineclientstr;

	DecStr(pmovehelperstr, 38);
	pMoveHelperServerPP = FindMemoryPattern(ClientHandle, pmovehelperstr, 38);
	EncStr(pmovehelperstr, 38);
	if (!pMoveHelperServerPP)
	{
		THROW_ERROR(ERR_CANT_FIND_MOVEHELPER_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]pmovehelperstr;
	pMoveHelperServerPP += 2;

#if 0
	DecStr(tracetoexitstr, 50);
	TraceToExitGame = (TraceToExitFn)FindMemoryPattern(ClientHandle, tracetoexitstr, 50);
	EncStr(tracetoexitstr, 50);
	if (!TraceToExitGame)
	{
		THROW_ERROR(ERR_CANT_FIND_TRACETOEXIT_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]tracetoexitstr;
#endif


	DecStr(cliptracetoplayersstr, 122);
	int adr = FindMemoryPattern(ClientHandle, cliptracetoplayersstr, 122);//strenc("53  8B  DC  83  EC  08  83  E4  F0  83  C4  04  55  8B  6B  04  89  6C  24  04  8B  EC  81  EC  ??  ??  ??  ??  8B  43  10")); //((DWORD)ClientHandle + 0x328940);
	EncStr(cliptracetoplayersstr, 122);
	pUTIL_ClipTraceToPlayers = (void(__fastcall*)(const Vector&, const Vector&, unsigned int, ITraceFilter *, trace_t *))adr;
	//char test[128];
	//sprintf(test, "%i", adr);
	//MessageBox(NULL, test, test, MB_OK);
	if (!pUTIL_ClipTraceToPlayers)
	{
		THROW_ERROR(ERR_CANT_FIND_UTIL_CLIPTRACETOPLAYERS_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[] cliptracetoplayersstr;


	DecStr(handlebulletpenstr, 110);
	adr = FindMemoryPattern(ClientHandle, handlebulletpenstr, 110);
	EncStr(handlebulletpenstr, 110);

	HandleBulletPenetrationCSGO = (bool(__thiscall *)(CBaseEntity *, float *, int *, char *, trace_t *, Vector *, int, float, float, int, int, float, int *, Vector *, int, int, float *))adr;
	if (!HandleBulletPenetrationCSGO)
	{
		THROW_ERROR(ERR_CANT_FIND_BULLETPENETRATION_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[] handlebulletpenstr;
	//char txt[256];
	//sprintf(txt, "%02X", HandleBulletPenetrationCSGO);
	// MessageBoxA(NULL, txt, "TEST", MB_OK);
	DecStr(getlastcompmatchidstr, 198);
	adr = FindMemoryPattern(ClientHandle, getlastcompmatchidstr, 198);
	EncStr(getlastcompmatchidstr, 198);
	Helper_GetLastCompetitiveMatchId = (uint64_t(__stdcall *)(void))adr;
	if (!Helper_GetLastCompetitiveMatchId)
	{
		THROW_ERROR(ERR_CANT_FIND_HELPER_GETLASTMATCHID);
		exit(EXIT_SUCCESS);
	}
	delete[]getlastcompmatchidstr;

	DecStr(setclantagsigstr, 34);
	adr = FindMemoryPattern(EngineHandle, setclantagsigstr, 34);
	EncStr(setclantagsigstr, 34);
	pSetClanTag = (void(__fastcall*)(const char*, const char*))adr;
	if (!pSetClanTag)
	{
		THROW_ERROR(ERR_CANT_FIND_SETCLANTAG_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[] setclantagsigstr;

	DecStr(clientstatestr, 50);
	adr = FindMemoryPattern(EngineHandle, clientstatestr, 50);
	EncStr(clientstatestr, 50);
	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_CLIENT_STATE);
		exit(EXIT_SUCCESS);
	}
	delete[]clientstatestr;

	pClientState = *(DWORD*)(adr + 2);
	DecStr(ispausedstr, 154);
	adr = FindMemoryPattern(EngineHandle, ispausedstr, 154);
	EncStr(ispausedstr, 154);
	IsPaused = (BOOLEAN(__thiscall*)(DWORD))adr;
	if (!IsPaused)
	{
		THROW_ERROR(ERR_CANT_FIND_IS_PAUSED_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]ispausedstr;

#if 0
	DecStr(tickcountstr, 118);
	adr = FindMemoryPattern(EngineHandle, tickcountstr);
	EncStr(tickcountstr, 118);
	host_tickcount = adr;
	if (!host_tickcount)
	{
		THROW_ERROR(ERR_CANT_FIND_HOST_TICKCOUNT_SIGNATURE);
		exit(EXIT_SUCCESS);
	}

	host_tickcount++;
	host_tickcount = ReadInt(host_tickcount);
#endif
	delete[] tickcountstr;


	DecStr(predrandomseedstr, 74);
	adr = FindMemoryPattern(ClientHandle, predrandomseedstr, 74);
	EncStr(predrandomseedstr, 74);
	m_pPredictionRandomSeed = adr;

	if (!m_pPredictionRandomSeed)
	{
		THROW_ERROR(ERR_CANT_FIND_PREDICTION_RANDOMSEED_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]predrandomseedstr;

	m_pPredictionRandomSeed += 2;
	m_pPredictionRandomSeed = ReadInt(m_pPredictionRandomSeed);

	DecStr(m_pPredictionPlayerCSGO_Sig, 46);
	adr = FindMemoryPattern(ClientHandle, m_pPredictionPlayerCSGO_Sig, 46);
	EncStr(m_pPredictionPlayerCSGO_Sig, 46);
	delete[] m_pPredictionPlayerCSGO_Sig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_PREDICTION_PLAYER_SIG);
		exit(EXIT_SUCCESS);
	}

	m_pPredictionPlayer = (DWORD)*(DWORD*)(adr + 2);

	DecStr(gamerulesstr, 174);
	adr = FindMemoryPattern(ClientHandle, gamerulesstr, 174);
	EncStr(gamerulesstr, 174);
	g_pGameRules = adr;

	if (!g_pGameRules)
	{
		THROW_ERROR(ERR_CANT_FIND_GAMERULES_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]gamerulesstr;

	g_pGameRules += 2;

	GameRulesShouldCollideOffset = ReadByte(g_pGameRules + 0x11);

	g_pGameRules = ReadInt(g_pGameRules);

	DecStr(pseudorandomstr, 42);
	adr = FindMemoryPattern(ClientHandle, pseudorandomstr, 42);
	EncStr(pseudorandomstr, 42);
	MD5_PseudoRandom = (UINT(__cdecl*)(UINT))adr;

	if (!MD5_PseudoRandom)
	{
		THROW_ERROR(ERR_CANT_FIND_PSEUDORANDOM_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]pseudorandomstr;

	DecStr(setlasttimestampinterpolatesig, 122);
	adr = FindMemoryPattern(ClientHandle, setlasttimestampinterpolatesig, 122);
	EncStr(setlasttimestampinterpolatesig, 122);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_INTERPOLATE_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]setlasttimestampinterpolatesig;

	AdrOfSetLastTimeStampInterpolate = adr + 2;

	AdrOfIsPausedExtrapolate = adr + 0x29;

	DecStr(setlasttimestampfsnsig, 102);
	adr = FindMemoryPattern(ClientHandle, setlasttimestampfsnsig, 102);
	EncStr(setlasttimestampfsnsig, 102);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_INTERPOLATE_FSN_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]setlasttimestampfsnsig;

	AdrOfSetLastTimeStampFSN = adr + 2;

	DecStr(s_binterpolatesig, 118);
	adr = FindMemoryPattern(ClientHandle, s_binterpolatesig, 118);
	EncStr(s_binterpolatesig, 118);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_SBINTERPOLATE_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]s_binterpolatesig;

	AdrOfs_bInterpolate = ReadInt(adr + 1);

	DecStr(invalidatebonecachestr, 126);
	adr = FindMemoryPattern(ClientHandle, invalidatebonecachestr, 126);
	EncStr(invalidatebonecachestr, 126);

	AdrOfInvalidateBoneCache = adr;

	AdrOf_m_nWritableBones = m_nForceBone + 0x20;

	DecStr(didcheckforocclusionsig, 66);
	adr = FindMemoryPattern(ClientHandle, didcheckforocclusionsig, 66);
	EncStr(didcheckforocclusionsig, 66);
	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_DIDCHECKFOROCCLUSION_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]didcheckforocclusionsig;

	AdrOf_m_iDidCheckForOcclusion = *(DWORD*)(adr + 7);
	AdrOf_m_dwOcclusionArray = *(DWORD*)(adr + 1);

	DecStr(standardfilterrulessig, 66);
	adr = FindMemoryPattern(ClientHandle, standardfilterrulessig, 66);
	EncStr(standardfilterrulessig, 66);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_STANDARDFILTERRULES_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[] standardfilterrulessig;

	//AdrOf_StandardFilterRulesCallOne = *(DWORD*)(adr + 1);
	AdrOf_StandardFilterRulesMemoryOne = *(DWORD*)(adr + 0x15); //0x15

	DecStr(standardfilterrulescallsig, 142);
	adr = FindMemoryPattern(ClientHandle, standardfilterrulescallsig, 142);
	EncStr(standardfilterrulescallsig, 142);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_STANDARDFILTERRULES_SIGNATURE2);
		exit(EXIT_SUCCESS);
	}
	delete[]standardfilterrulescallsig;

	AdrOf_StandardFilterRulesCallOne = adr;

	DecStr(getcompranksig, 54);
	adr = FindMemoryPattern(ClientHandle, getcompranksig, 54);
	EncStr(getcompranksig, 54);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_GETCOMPRANK_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[] getcompranksig;

	ServerRankRevealAllEx = (ServerRankRevealAllFn)adr;

	DecStr(setabsoriginstr, 314);
	adr = FindMemoryPattern(ClientHandle, setabsoriginstr, 314);
	EncStr(setabsoriginstr, 314);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_SETABSORIGIN_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]setabsoriginstr;

	AdrOf_SetAbsOrigin = adr;

	DecStr(setabsanglesstr, 54);
	adr = FindMemoryPattern(ClientHandle, setabsanglesstr, 54);
	EncStr(setabsanglesstr, 54);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_SETABSANGLES_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]setabsanglesstr;

	AdrOf_SetAbsAngles = adr;

	DecStr(setabsvelocitystr, 302);
	adr = FindMemoryPattern(ClientHandle, setabsvelocitystr, 302);
	EncStr(setabsvelocitystr, 302);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_SETABSVELOCITY_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]setabsvelocitystr;

	AdrOf_SetAbsVelocity = adr;

	DecStr(lookupposeparameterstr, 74);
	adr = FindMemoryPattern(ClientHandle, lookupposeparameterstr, 74);
	EncStr(lookupposeparameterstr, 74);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_LOOKUPPOSEPARAMETER_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]lookupposeparameterstr;

	LookupPoseParameterGame = (LookupPoseParameterFn)adr;

	DecStr(getposeparameterrangestr, 310);
	adr = FindMemoryPattern(ClientHandle, getposeparameterrangestr, 310);
	EncStr(getposeparameterrangestr, 310);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_GETPOSEPARAMETERRANGE_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]getposeparameterrangestr;

	GetPoseParameterRangeGame = (GetPoseParameterRangeFn)adr;

#if 0
	DecStr(setposeparameterstr, 122);
	adr = FindMemoryPattern(ClientHandle, setposeparameterstr);
	EncStr(setposeparameterstr, 122);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_SETPOSEPARAMETER_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	SetPoseParameterGame = (SetPoseParameterFn)adr;
#endif
	delete[]setposeparameterstr;

#if 0
	DecStr(datacachesetposeparametersig, 102);
	adr = FindMemoryPattern(ClientHandle, datacachesetposeparametersig);
	EncStr(datacachesetposeparametersig, 102);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_DATACACHE_SETPOSEPARAM_SIG);
		exit(EXIT_SUCCESS);
	}

	AdrOf_DataCacheSetPoseParmaeter = ReadInt(adr + 2);
#endif
	delete[]datacachesetposeparametersig;


	DecStr(s_bOverridePostProcessingDisable_sig, 46);
	adr = FindMemoryPattern(ClientHandle, s_bOverridePostProcessingDisable_sig, 46);
	EncStr(s_bOverridePostProcessingDisable_sig, 46);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_OVERRIDEPOSTPROCESSING_SIGNATURE);
		exit(EXIT_SUCCESS);
	}
	delete[]s_bOverridePostProcessingDisable_sig;

	s_bOverridePostProcessingDisable = (bool*)ReadInt(adr + 2);

	DecStr(updateclientsideanimsig, 34);
	adr = FindMemoryPattern(ClientHandle, updateclientsideanimsig, 34);
	EncStr(updateclientsideanimsig, 34);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_UPDATECLIENTSIDEANIMATION_SIG);
		exit(EXIT_SUCCESS);
	}
	delete[]updateclientsideanimsig;

	OffsetOf_UpdateClientSideAnimation = ReadInt((uintptr_t)adr + 9) / 4;

	DecStr(updateclientsideanimfnsigstr, 94);
	adr = FindMemoryPattern(ClientHandle, updateclientsideanimfnsigstr, 94);
	EncStr(updateclientsideanimfnsigstr, 94);
	delete[]updateclientsideanimfnsigstr;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_UPDATECLIENTSIDEANIMATIONFN_SIG);
		exit(EXIT_SUCCESS);
	}

	oUpdateClientSideAnimation = (UpdateClientSideAnimationFn)adr;

	DecStr(invalidatephysicsrecursivestr, 74);
	adr = FindMemoryPattern(ClientHandle, invalidatephysicsrecursivestr, 74);
	EncStr(invalidatephysicsrecursivestr, 74);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_INVALIDATEPHYSICSRECURSIVE_SIG);
		exit(EXIT_SUCCESS);
	}
	delete[]invalidatephysicsrecursivestr;

	AdrOf_InvalidatePhysicsRecursive = adr;

	DecStr(frametimesigstr, 130);
	adr = FindMemoryPattern(EngineHandle, frametimesigstr, 130);
	EncStr(frametimesigstr, 130);
	delete[]frametimesigstr;
	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_FRAMETIME_SIGNATURE);
		exit(EXIT_SUCCESS);
	}

	AdrOf_Frametime1 = *(DWORD*)(adr + 4);
	AdrOf_Frametime2 = *(DWORD*)(adr + 12);
	AdrOf_Frametime3 = *(DWORD*)(adr + 20);

	DecStr(clientlistsigstr, 26);
	adr = FindMemoryPattern(EngineHandle, clientlistsigstr, 26);
	EncStr(clientlistsigstr, 26);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_CLIENTLIST_SIGNATURE);
		exit(EXIT_SUCCESS);
	}

	delete[]clientlistsigstr;

	ClientCount = *(DWORD**)(adr + 7);
	ClientList = *(DWORD*)(adr + 0x14);

	DecStr(clientsideanimationlistsig, 46);
	adr = FindMemoryPattern(ClientHandle, clientsideanimationlistsig, 46);
	EncStr(clientsideanimationlistsig, 46);

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_CLIENT_SIDE_ANIMATION_LIST_SIGNATURE);
		exit(EXIT_SUCCESS);
	}

	delete[]clientsideanimationlistsig;

	g_ClientSideAnimationList = (CUtlVectorSimple*)*(DWORD*)(adr + 1);

#ifdef SERVER_CRASHER
	// DecStr(net_sendpacketsig, 66);
	// AdrOf_NET_SendPacket = FindMemoryPattern(EngineHandle, net_sendpacketsig, 66);
	// EncStr(net_sendpacketsig, 66);
	// DecStr(net_senddatasig, 98);
	// AdrOf_CNET_SendData = FindMemoryPattern(EngineHandle, net_senddatasig, 98) + 25;
	// EncStr(net_senddatasig, 98);
	DecStr(net_senddatagramsig, 102);
	AdrOf_CNET_SendDatagram = FindMemoryPattern(EngineHandle, net_senddatagramsig, 102);
	EncStr(net_senddatagramsig, 102);

	// delete[]net_sendpacketsig;
	// delete[]net_senddatasig;
	delete[]net_senddatagramsig;
#endif

	DecStr(s_bEnableInvalidateBoneCachesig, 42);
	adr = FindMemoryPattern(ClientHandle, s_bEnableInvalidateBoneCachesig, 42);
	EncStr(s_bEnableInvalidateBoneCachesig, 42);

	delete[]s_bEnableInvalidateBoneCachesig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_ENABLE_INVALIDATE_BONE_CACHE_SIGNATURE);
		exit(EXIT_SUCCESS);
	}

	s_bEnableInvalidateBoneCache = (bool*)*(DWORD*)(adr + 6);

	DecStr(allowboneaccessfornormalmodelssig, 62);
	adr = FindMemoryPattern(ClientHandle, allowboneaccessfornormalmodelssig, 62);
	EncStr(allowboneaccessfornormalmodelssig, 62);
	delete[]allowboneaccessfornormalmodelssig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_BONEACCESS_FOR_NORMAL_MODELS_SIG);
		exit(EXIT_SUCCESS);
	}

	bAllowBoneAccessForNormalModels = (bool*)*(DWORD*)(adr + 3);

	DecStr(allowboneaccessforviewmodelssig, 46);
	adr = FindMemoryPattern(ClientHandle, allowboneaccessforviewmodelssig, 46);
	EncStr(allowboneaccessforviewmodelssig, 46);
	delete[]allowboneaccessforviewmodelssig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_BONEACCESS_FOR_VIEW_MODELS_SIG);
		exit(EXIT_SUCCESS);
	}

	bAllowBoneAccessForViewModels = (bool*)*(DWORD*)(adr + 3);

	DecStr(modelbonecountersig, 78);
	adr = FindMemoryPattern(ClientHandle, modelbonecountersig, 78);
	EncStr(modelbonecountersig, 78);
	delete[]modelbonecountersig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_MODEL_BONE_COUNTER_SIG);
		exit(EXIT_SUCCESS);
	}

	g_iModelBoneCounter = (unsigned long*)*(DWORD*)(adr - 4);

	DecStr(glowobjectmanager3str, 78);
	adr = FindMemoryPattern(ClientHandle, glowobjectmanager3str, 78);
	EncStr(glowobjectmanager3str, 78);

	delete[]glowobjectmanager3str;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_GLOW_OBJECT_MANAGER_SIGNATURE);
		exit(EXIT_SUCCESS);
	}

	GlowObjectManagerAdr = *(DWORD*)(adr + 3);

	DecStr(radarbasesig, 58);
	adr = FindMemoryPattern(ClientHandle, radarbasesig, 58);
	EncStr(radarbasesig, 58);
	delete[]radarbasesig;
	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_RADAR_BASE_SIG);
		exit(EXIT_SUCCESS);
	}

	RadarBaseAdr = *(DWORD*)(adr + 1);

	//char *IsEntityBreakableSig1 = new char[131]
	//char *IsEntityBreakableSig2 = new char[143]
	//DWORD IsEntityBreakable_FirstCall_Arg1 = NULL;
	//DWORD IsEntityBreakable_FirstCall_Arg2 = NULL;
	//DWORD IsEntityBreakable_SecondCall_Arg1 = NULL
	//	 DWORD IsEntityBreakable_SecondCall_Arg2 = NULL
	//	 DWORD AdrOf_IsEntityBreakableCall = NULL;

	DecStr(IsEntityBreakableSig1, 130);
	adr = FindMemoryPattern(ClientHandle, IsEntityBreakableSig1, 130);
	EncStr(IsEntityBreakableSig1, 130);
	delete[]IsEntityBreakableSig1;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_IS_ENTITY_BREAKABLE_SIG1);
		exit(EXIT_SUCCESS);
	}

	IsEntityBreakable_FirstCall_Arg1 = *(DWORD*)(adr + 8);
	IsEntityBreakable_FirstCall_Arg2 = *(DWORD*)(adr + 3);

	DecStr(IsEntityBreakableSig2, 142);
	adr = FindMemoryPattern(ClientHandle, IsEntityBreakableSig2, 142);
	EncStr(IsEntityBreakableSig2, 142);
	delete[]IsEntityBreakableSig2;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_IS_ENTITY_BREAKABLE_SIG2);
		exit(EXIT_SUCCESS);
	}

	IsEntityBreakable_SecondCall_Arg1 = *(DWORD*)(adr + 8);
	IsEntityBreakable_SecondCall_Arg2 = *(DWORD*)(adr + 3);


	DecStr(IsEntityBreakableActualCallSig, 58);
	adr = FindMemoryPattern(ClientHandle, IsEntityBreakableActualCallSig, 58);
	EncStr(IsEntityBreakableActualCallSig, 58);
	delete[]IsEntityBreakableActualCallSig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_IS_ENTITY_BREAKABLE_SIG3);
		exit(EXIT_SUCCESS);
	}

	AdrOf_IsEntityBreakableCall = adr;

	DecStr(weaponscriptpointerstr, 50);
	adr = FindMemoryPattern(ClientHandle, weaponscriptpointerstr, 50);
	EncStr(weaponscriptpointerstr, 50);
	delete[]weaponscriptpointerstr;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_WEAPONDATAPTR_SIG);
		exit(EXIT_SUCCESS);
	}

	WeaponDataPtrUnknown = *(DWORD*) (adr + 1);
	
	DecStr(weaponscriptcallsigstr, 78);
	adr = FindMemoryPattern(ClientHandle, weaponscriptcallsigstr, 78);
	EncStr(weaponscriptcallsigstr, 78);
	delete[] weaponscriptcallsigstr;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_WEAPONDATAPTRCALL_SIG);
		exit(EXIT_SUCCESS);
	}

	WeaponDataPtrUnknownCall = adr;

	DecStr(getcswpndatasig, 86);
	adr = FindMemoryPattern(ClientHandle, getcswpndatasig, 86);
	EncStr(getcswpndatasig, 86);
	delete[]getcswpndatasig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_GETCSWEAPONDATA_SIG);
		exit(EXIT_SUCCESS);
	}

	GetCSWeaponDataAdr = adr;

	DecStr(cam_tothirdperson_sig, 50);
	adr = FindMemoryPattern(ClientHandle, cam_tothirdperson_sig, 50);
	EncStr(cam_tothirdperson_sig, 50);
	delete[] cam_tothirdperson_sig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_CAM_TO_THIRDPERSON_SIG);
		exit(EXIT_SUCCESS);
	}

	CAM_ToThirdPerson = (CAM_ToThirdPersonFn)adr;
	Interfaces::Input = (::IInput*)*(DWORD*)(adr + 1);

	DecStr(cam_tofirstperson_sig, 50);
	adr = FindMemoryPattern(ClientHandle, cam_tofirstperson_sig, 50);
	EncStr(cam_tofirstperson_sig, 50);
	delete[] cam_tofirstperson_sig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_CAM_TO_FIRSTPERSON_SIG);
		exit(EXIT_SUCCESS);
	}

	CAM_ToFirstPerson = (CAM_ToFirstPersonFn)adr;

	DecStr(setupbonessigstr, 38);
	adr = FindMemoryPattern(ClientHandle, setupbonessigstr, 38);
	EncStr(setupbonessigstr, 38);
	delete[]setupbonessigstr;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_SETUPBONES_SIG);
		exit(EXIT_SUCCESS);
	}

	oSetupBones = (SetupBonesFn)adr;

	DecStr(ikinitsig, 74);
	adr = FindMemoryPattern(ClientHandle, ikinitsig, 74);
	EncStr(ikinitsig, 74);
	delete[]ikinitsig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_IK_INIT_SIG);
		exit(EXIT_SUCCESS);
	}

	IKInit = (IKInitFn)adr;

	DecStr(updatetargetssig, 54);
	adr = FindMemoryPattern(ClientHandle, updatetargetssig, 54);
	EncStr(updatetargetssig, 54);
	delete[] updatetargetssig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_UPDATE_TARGETS_SIG);
		exit(EXIT_SUCCESS);
	}

	UpdateTargets = (UpdateTargetsFn)adr;

	DecStr(solvedependenciessig, 70);
	adr = FindMemoryPattern(ClientHandle, solvedependenciessig, 70);
	EncStr(solvedependenciessig, 70);
	delete[]solvedependenciessig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_SOLVE_DEPENDENCIES_SIG);
		exit(EXIT_SUCCESS);
	}

	SolveDependencies = (SolveDependenciesFn)adr;

	DecStr(attachmenthelpersig, 50);
	adr = FindMemoryPattern(ClientHandle, attachmenthelpersig, 50);
	EncStr(attachmenthelpersig, 50);
	delete[]attachmenthelpersig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_ATTACHMENT_HELPER_SIG);
		exit(EXIT_SUCCESS);
	}

	AttachmentHelper = (AttachmentHelperFn)adr;

	DecStr(createiksig, 34);
	adr = FindMemoryPattern(ClientHandle, createiksig, 34);
	EncStr(createiksig, 34);
	delete[]createiksig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_CREATE_IK_SIG);
		exit(EXIT_SUCCESS);
	}

	CreateIK = (CreateIKFn)adr;

	DecStr(teleportedsig, 146);
	adr = FindMemoryPattern(ClientHandle, teleportedsig, 146);
	EncStr(teleportedsig, 146);
	delete[]teleportedsig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_TELEPORTED_SIG);
		exit(EXIT_SUCCESS);
	}

	Teleported = (TeleportedFn)adr;

	DecStr(unknownsetupbonessig, 42);
	adr = FindMemoryPattern(ClientHandle, unknownsetupbonessig, 42);
	EncStr(unknownsetupbonessig, 42);
	delete[]unknownsetupbonessig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_UNKNOWN_SETUPBONES_SIG);
		exit(EXIT_SUCCESS);
	}

	unknownsetupbonescall_offset = *(char*)(adr + 0x16);
	UnknownSetupBonesVTable = *(DWORD*)(adr + 1);

	DecStr(shouldskipanimationframesig, 66);
	adr = FindMemoryPattern(ClientHandle, shouldskipanimationframesig, 66);
	EncStr(shouldskipanimationframesig, 66);
	delete[]shouldskipanimationframesig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_SHOULD_SKIP_ANIMATION_FRAME_SIG);
		exit(EXIT_SUCCESS);
	}

	ShouldSkipAnimationFrame = (ShouldSkipAnimationFrameFn)adr;

	DecStr(inthreadedbonesetupsig, 34);
	adr = FindMemoryPattern(ClientHandle, inthreadedbonesetupsig, 34);
	EncStr(inthreadedbonesetupsig, 34);
	delete[]inthreadedbonesetupsig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_IN_THREADED_BONE_SETUP_SIG);
		exit(EXIT_SUCCESS);
	}

	g_bInThreadedBoneSetup = (bool*)*(DWORD*)(adr + 2);

	DecStr(mdlcachecriticalsectioncallsig, 42);
	adr = FindMemoryPattern(ClientHandle, mdlcachecriticalsectioncallsig, 42);
	EncStr(mdlcachecriticalsectioncallsig, 42);
	delete[]mdlcachecriticalsectioncallsig;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_MDLCACHE_CRITICAL_SECTION_CALL_SIG);
		exit(EXIT_SUCCESS);
	}

	MDLCacheCriticalSectionCall = (MDLCacheCriticalSectionCallFn)adr;

#if 0
	DecStr(demoplayersigstr, 134);
	adr = FindMemoryPattern(EngineHandle, demoplayersigstr, 134);
	EncStr(demoplayersigstr, 134);
	delete[] demoplayersigstr;

	if (!adr)
	{
		THROW_ERROR(ERR_CANT_FIND_DEMOPLAYER_CREATEMOVE_SIG);
		exit(EXIT_SUCCESS);
	}

	DemoPlayerVTable = *(DWORD*)(adr + 8);
	DemoPlayerCreateMoveReturnAdr = adr + 19;
	SendDatagramCL_MoveReturnAdr = adr + 0x2B9;
#endif

	//DemoPlayer = new VTHook((DWORD**)*(DWORD*)DemoPlayerVTable);
	//oIsDemoPlayingBack = (IsPlayingBackFn)DemoPlayer->HookFunction((DWORD)Hooks::DemoIsPlayingBack, 4);

	DecStr(vclientliststr, 20);
	Interfaces::ClientEntList = CaptureInterface<IClientEntityList>(ClientHandle, vclientliststr);
	EncStr(vclientliststr, 20);
	delete[] vclientliststr;

	DecStr(vsurfpropsstr, 23);
	Interfaces::Physprops = CaptureInterface<IPhysicsSurfaceProps>(VPhysicsHandle, vsurfpropsstr);
	EncStr(vsurfpropsstr, 23);
	delete[] vsurfpropsstr;

	DecStr(vclientpredstr, 20);
	Interfaces::Prediction = CaptureInterface<CPrediction>(ClientHandle, vclientpredstr);
	EncStr(vclientpredstr, 20);
	delete[] vclientpredstr;

	DecStr(gamemovementstr, 15);
	Interfaces::GameMovement = CaptureInterface<CGameMovement>(ClientHandle, gamemovementstr);
	EncStr(gamemovementstr, 15);
	delete[] gamemovementstr;

	DecStr(vmodelinfoclientstr, 19);
	Interfaces::ModelInfoClient = CaptureInterface<IVModelInfoClient>(EngineHandle, vmodelinfoclientstr);
	EncStr(vmodelinfoclientstr, 19);
	delete[]vmodelinfoclientstr;

	DecStr(venginecvarstr, 14);
	Interfaces::Cvar = CaptureInterface<ICVar>(VSTDLIBHandle, venginecvarstr);
	EncStr(venginecvarstr, 14);
	delete[]venginecvarstr;

	DecStr(gameeventsmgrstr, 20);
	Interfaces::GameEventManager = CaptureInterface<IGameEventManager2>(EngineHandle, gameeventsmgrstr);
	EncStr(gameeventsmgrstr, 20);
	delete[] gameeventsmgrstr;

	DecStr(vdebugstr, 16);
	Interfaces::DebugOverlay = CaptureInterface<IVDebugOverlay>(EngineHandle, vdebugstr);
	EncStr(vdebugstr, 16);
	delete[] vdebugstr;

	DecStr(mdlcachestr, 11);
	Interfaces::MDLCache = CaptureInterface<IMDLCache>(DatacacheHandle, mdlcachestr);
	EncStr(mdlcachestr, 11);
	delete[]mdlcachestr;

	DecStr(enginesoundclientstr, 21);
	Interfaces::IEngineSoundClient = CaptureInterface<void>(EngineHandle, enginesoundclientstr);
	EncStr(enginesoundclientstr, 21);
	delete[] enginesoundclientstr;

	EngineClientSound = new VTHook((DWORD**)Interfaces::IEngineSoundClient);

	DecStr(vguimatsurfacestr, 18);
	DecStr(vguisurfacestr, 15);
	HANDLE vguimatsurfacehandle = (HANDLE)GetModuleHandleA(vguimatsurfacestr);
	Interfaces::Surface = CaptureInterface<void>(vguimatsurfacehandle, vguisurfacestr);
	EncStr(vguisurfacestr, 15);
	EncStr(vguimatsurfacestr, 18);
	delete[] vguisurfacestr;
	delete[] vguimatsurfacestr;
	
	HSurface = new VTHook((DWORD**)Interfaces::Surface);
	oPlaySound = (PlaySoundFn)HSurface->HookFunction((DWORD)Hooks::HookedPlaySound, 82);

	DecStr(vgui2str, 9);
	DecStr(vguipanelstr, 13);
	HANDLE vgui2handle = (HANDLE)GetModuleHandleA(vgui2str);
	Interfaces::VPanel = CaptureInterface<IVPanel>(vgui2handle, vguipanelstr);
	EncStr(vguipanelstr, 13);
	EncStr(vgui2str, 9);
	delete[] vgui2str;
	delete[] vguipanelstr;

	VPanel = new VTHook((DWORD**)Interfaces::VPanel);
	oPaintTraverse = (PaintTraverseFn)VPanel->HookFunction((DWORD)Hooks::PaintTraverse, 41);
#if 0
	DecStr(renderviewsignaturestr, 34);
	DWORD adrsig = FindMemoryPattern(ClientHandle, renderviewsignaturestr, 34);
	EncStr(renderviewsignaturestr, 34);
	delete[]renderviewsignaturestr;


	if (!adrsig)
	{
		THROW_ERROR(ERR_CANT_FIND_VIEWRENDER_SIGNATURE);
		exit(EXIT_SUCCESS);
	}

	adrsig -= 7;

	adrsig = ReadInt(adrsig);
	adrsig = ReadInt(adrsig);
#endif

	//auto viewRender = **reinterpret_cast<void***>(adrsig);

	//Interfaces::TE_FireBullets = (C_TEFireBullets*)(ReadInt((DWORD)ClientHandle + TE_FIREBULLETS_OFFSET));
	//Interfaces::TE_EffectDispatch = (C_TEEffectDispatch*)((DWORD)ClientHandle + TE_DISPATCHEFFECT_OFFSET);
	//GameMovement001
	//Hook virtual method tables

	//Hooks::VPanel = new VTHook((DWORD**)Interfaces::VPanel);
	ClientMode = new VTHook((DWORD**)Interfaces::ClientMode);
	Client = new VTHook((DWORD**)Interfaces::Client);
#ifndef USE_REBUILT_HANDLE_BULLET_PENETRATION
	Trace = new VTHook((DWORD**)Interfaces::EngineTrace);
	oTraceRay = (TraceRayFn)Trace->HookFunction((DWORD)Hooks::TraceRay, 5);
#endif
	Prediction = new VTHook((DWORD**)Interfaces::Prediction);
	Engine = new VTHook((DWORD**)Interfaces::Engine);
	//TE_FireBullets = new VTHook((DWORD**)Interfaces::TE_FireBullets);
	//TE_EffectDispatch = new VTHook((DWORD**)Interfaces::TE_EffectDispatch);

	//HRenderView = new VTHook((DWORD**)adrsig);

	//Hooks::ModelRender = new VTHook((DWORD**)Interfaces::ModelRender);
	//Hooks::Surface = new VTHook((DWORD**)Interfaces::Surface);
	//Hooks::D3D9 = new VTHook((DWORD**)offsets.d3d9Device);
	 //get ids from here: https://github.com/pmrowla/hl2sdk-csgo/blob/master/game/client/iclientmode.h

	//oTE_FireBullets_PostDataUpdate = (TE_FireBullets_PostDataUpdateFn)TE_FireBullets->HookFunction((DWORD)Hooks::TE_FireBullets_PostDataUpdate, 7);
	//oTE_EffectDispatch_PostDataUpdate = (TE_EffectDispatch_PostDataUpdateFn)TE_EffectDispatch->HookFunction((DWORD)Hooks::TE_EffectDispatch_PostDataUpdate, 7);

	 oOverrideView = (OverrideViewFN)ClientMode->HookFunction((DWORD)Hooks::OverrideView, 18);
	 oCreateMove = (CreateMoveFn)ClientMode->HookFunction((DWORD)Hooks::CreateMove, 24);
	 //oShouldDrawLocalPlayer = (ShouldDrawLocalPlayerFn)ClientMode->HookFunction((DWORD)Hooks::ShouldDrawLocalPlayer.Entity, 15);
	 oGetViewModelFOV = (GetViewModelFOVFn)ClientMode->HookFunction((DWORD)GetViewModelFOV, 35);
	 oRunCommand = (RunCommandFn)Prediction->HookFunction((DWORD)Hooks::RunCommand, 19);
	 oGetLastTimeStamp = (GetLastTimeStampFn)Engine->HookFunction((DWORD)Hooks::GetLastTimeStamp, 14);
	 //oRenderView = (RenderViewFn)HRenderView->HookFunction((DWORD)Hooks::RenderView, 6);
	 //oSetViewAngles = (SetViewAnglesFn)Engine->HookFunction((DWORD)Hooks::SetViewAngles, 19);
	 oIsPaused = (IsPausedFn)Engine->HookFunction((DWORD)Hooks::IsPaused, 90);
	 oEmitSound = (EmitSoundFn)EngineClientSound->HookFunction((DWORD)Hooks::EmitSound, 5);

	 DecStr(vstdlibstr2, 11);
	 HMODULE vstdlibhandle = GetModuleHandle(vstdlibstr2);
	 EncStr(vstdlibstr2, 11);
	 delete[]vstdlibstr2;

	 DecStr(randomfloatstr, 11);
	 RandomFloat = (float(*)(float, float))GetProcAddress(vstdlibhandle, randomfloatstr);
	 EncStr(randomfloatstr, 11);
	 if (!RandomFloat)
	 {
		 THROW_ERROR(ERR_CANT_FIND_RANDOMFLOAT);
		 exit(EXIT_SUCCESS);
	 }
	 delete[]randomfloatstr;

	 DecStr(randomseedstr, 10);
	 RandomSeed = (void(*)(unsigned int))GetProcAddress(vstdlibhandle, randomseedstr);
	 EncStr(randomseedstr, 10);
	 if (!RandomSeed)
	 {
		 THROW_ERROR(ERR_CANT_FIND_RANDOMSEED);
		 exit(EXIT_SUCCESS);
	 }
	 delete[]randomseedstr;

	 DecStr(threadinmainthreadstr, 18);
	 ThreadInMainThread = (bool(*)(void))GetProcAddress((HMODULE)Tier0Handle, threadinmainthreadstr);
	 EncStr(threadinmainthreadstr, 18);
	 delete[]threadinmainthreadstr;

	 if (!EXTERNAL_WINDOW) //externalstr
	 {
		 DecStr(dxptrstr, 42);
		 DWORD DXTablePrePointer = FindMemoryPattern(SHADERAPIDX9Handle, dxptrstr, 42);
		 EncStr(dxptrstr, 42);
		 if (!DXTablePrePointer)
		 {
			 THROW_ERROR(ERR_CANT_FIND_DIRECTX_TABLE);
			 exit(EXIT_SUCCESS);
		 }
		 delete[]dxptrstr;
		 static auto dx_ptr = **reinterpret_cast<uint32_t**>(DXTablePrePointer + 1);
		 DirectX = new VTHook((DWORD**)dx_ptr);
		 oEndScene = (EndSceneFn)DirectX->HookFunction((DWORD)Hooked_EndScene, 42);
		 oReset = (ResetFn)DirectX->HookFunction((DWORD)Hooked_Reset, 16);
	 }
	 //CloseHandle(vstdlibhandle);

	 oFrameStageNotify = (FrameStageNotifyFn)Client->HookFunction((DWORD)Hooks::FrameStageNotify, 36);
	// oIDrawModelExecute = (IDrawModelExecuteFn)Client->HookFunction((DWORD)Hooks::DrawModelExecute, 21);

	 CreateEventListeners(); //Create Game Event Listeners

	// CloseHandle(EngineHandle);
	// CloseHandle(ClientHandle);
	// CloseHandle(MatchmakingHandle);
	// CloseHandle(VPhysicsHandle);
	 VMP_END
}