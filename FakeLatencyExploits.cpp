#include "player_lagcompensation.h"
#include "INetchannelInfo.h"
#include "LocalPlayer.h"
#include "Netchan.h"


static std::deque<CIncomingSequence>sequences;
static int lastincomingsequencenumber;

//call in createmove 
void LagCompensation::UpdateIncomingSequences()
{
	DWORD ClientState = (DWORD)ReadInt(pClientState);
	if (ClientState)
	{
		INetChannel *netchan = (INetChannel*)ReadInt((uintptr_t)(ClientState + 0x9C));

		if (netchan)
		{
			if (LocalPlayer.Real_m_nInSequencenumber == 0)
			{
				LocalPlayer.Real_m_nInSequencenumber = netchan->m_nInSequenceNr;
				lastincomingsequencenumber = netchan->m_nInSequenceNr;
				//LocalPlayer.ModifiedSequenceNr = false;
			}

			if (netchan->m_nInSequenceNr > lastincomingsequencenumber)
			{
				//sequences.push_front(netchan->m_nInSequenceNr);
				lastincomingsequencenumber = netchan->m_nInSequenceNr;

				sequences.push_front(CIncomingSequence(netchan->m_nInReliableState, netchan->m_nOutReliableState, netchan->m_nInSequenceNr, Interfaces::Globals->realtime));
			}

			if (sequences.size() > 2048)
				sequences.pop_back();
		}
	}
}

void LagCompensation::ClearIncomingSequences()
{
	LocalPlayer.Real_m_nInSequencenumber = 0.0f;
	sequences.clear();
}

//Adds latency to the local player
void LagCompensation::AddLatencyToNetchan(INetChannel *netchan, float Latency)
{
	for (auto& seq : sequences)
	{
		if (Interfaces::Globals->realtime - seq.curtime >= Latency)
		{
			netchan->m_nInReliableState = seq.inreliablestate;
			//netchan->m_nOutReliableState = seq.outreliablestate;
			netchan->m_nInSequenceNr = seq.sequencenr;
			break;
		}
	}
}